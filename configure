#!/bin/sh

# C rules
ORIG=${CFLAGS}
CFLAGS="-std=gnu99 -ffreestanding"
CFLAGS="${CFLAGS} -Os -flto"
CFLAGS="${CFLAGS} -Wall -Wextra -pedantic"
CFLAGS="${CFLAGS} ${ORIG}"

# CPP
ORIG=${CXXFLAGS}
CXXFLAGS="-Os -flto -DDEBUG"
CXXFLAGS="${CXXFLAGS} -Wall -Wextra"
CXXFLAGS="${CXXFLAGS} -fno-exceptions -fno-rtti -ffreestanding"
CXXFLAGS="${CXXFLAGS} -std=c++17"
CXXFLAGS="${CXXFLAGS} ${ORIG}"

cat <<EOF

# Kernel Ninja build script
# Generated on $(date)

cflags = ${CFLAGS}
cxxflags = ${CXXFLAGS}
buildinfo = -DGITCOMMIT="\"$(git rev-parse HEAD)\"" -DBUILDDATE="\"$(date)\""
root = build

rule cc
  command = i686-elf-gcc \$cflags -I. -c \$in -o \$out

rule cxx
  command = i686-elf-c++ \$cxxflags \$buildinfo -I. -c \$in -o \$out
  description = Building C++ file \$in

rule nasm
  command = nasm -felf32 \$in -o \$out
  description = Assembling \$in with NASM

rule gas
  command = as --32 -c \$in -o \$out
  description = Assembling \$in with gas

rule link
  description = Linking \$out
  command = i686-elf-c++ -T linker.ld -Os -flto -s -nostdlib $
            -fno-stack-protector -Os -o \$out \$in -lgcc

rule tar
  command = tar cvf \$out \$in

EOF

build () {
    printf "build %s: %s %s\n\n" "${1}" "${2}" "${3}"
}

objfiles=""

printf "# C files\n\n"
for file in $(find . -type f -iname '*.c')
do
    objname=${file%.c}.o
    build "${objname}" cc "${file}"
    objfiles="${objfiles} ${objname}"
done

printf "# C++ files\n\n"
for file in $(find . -type f -iname '*.cpp')
do
    objname=${file%.cpp}.o
    build "${objname}" cxx "${file}"
    objfiles="${objfiles} ${objname}"
done

printf "# NASM files\n\n"
for file in $(find . -type f -iname '*.asm')
do
    objname=${file%.asm}.o
    build "${objname}" nasm "${file}"
    objfiles="${objfiles} ${objname}"
done

printf "# GAS files\n\n"
for file in $(find . -type f -iname '*.s')
do
    objname=${file%.s}.o
    build "${objname}" gas "${file}"
    objfiles="${objfiles} ${objname}"
done

printf "# tar drive\n\n"
printf "build tar-drive.tar: tar"
for file in $(find tar-drive/ -type f)
do
    printf " %s" "${file}"
done
echo

build leonardo.bin link "${objfiles}"

echo "default leonardo.bin"
